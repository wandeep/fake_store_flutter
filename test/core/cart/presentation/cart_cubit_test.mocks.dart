// Mocks generated by Mockito 5.3.2 from annotations
// in shopping/test/core/cart/presentation/cart_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shopping/core/cart/domain/usecases/add_to_cart_use_case.dart'
    as _i3;
import 'package:shopping/core/cart/domain/usecases/observe_cart_use_case.dart'
    as _i8;
import 'package:shopping/core/cart/domain/usecases/remove_from_cart_use_case.dart'
    as _i7;
import 'package:shopping/core/error/failures.dart' as _i5;
import 'package:shopping/core/usecases/no_params.dart' as _i9;
import 'package:shopping/features/products/domain/entities/product.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddToCartUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddToCartUseCase extends _i1.Mock implements _i3.AddToCartUseCase {
  MockAddToCartUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> call(_i6.Product? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [RemoveFromCartUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveFromCartUseCase extends _i1.Mock
    implements _i7.RemoveFromCartUseCase {
  MockRemoveFromCartUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> call(_i6.Product? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [ObserveCartUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockObserveCartUseCase extends _i1.Mock
    implements _i8.ObserveCartUseCase {
  MockObserveCartUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.Either<_i5.Failure, int>> call(_i9.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Stream<_i2.Either<_i5.Failure, int>>.empty(),
      ) as _i4.Stream<_i2.Either<_i5.Failure, int>>);
}
